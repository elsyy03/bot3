import discord
from discord.ext import commands, tasks
from discord import ui
from datetime import datetime, timedelta
import asyncio
import json
import os

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
WARNS_FILE = "warns.json"
TEMPORARY_PUNISHMENTS_FILE = "temporary_punishments.json"
TICKETS_FILE = "tickets.json"
USER_ROLES_BACKUP_FILE = "user_roles_backup.json"
MODERATION_STATS_FILE = "moderation_stats.json" # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def load_warns():
    if os.path.exists(WARNS_FILE):
        with open(WARNS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_warns(warns):
    with open(WARNS_FILE, 'w', encoding='utf-8') as f:
        json.dump(warns, f, ensure_ascii=False, indent=2)

def load_temporary_punishments():
    if os.path.exists(TEMPORARY_PUNISHMENTS_FILE):
        with open(TEMPORARY_PUNISHMENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_temporary_punishments(punishments):
    with open(TEMPORARY_PUNISHMENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(punishments, f, ensure_ascii=False, indent=2)

def load_tickets():
    if os.path.exists(TICKETS_FILE):
        with open(TICKETS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_tickets(tickets):
    with open(TICKETS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tickets, f, ensure_ascii=False, indent=2)

def load_user_roles():
    if os.path.exists(USER_ROLES_FILE):
        with open(USER_ROLES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_user_roles(user_roles):
    with open(USER_ROLES_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_roles, f, ensure_ascii=False, indent=2)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–ë–£–î–£–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´ –í on_ready) ---
moderator_role_name = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
helper_role_name = "–•–µ–ª–ø–µ—Ä"
mute_role_name = "–ú–£–¢"
ban_role_name = "–ë–ê–ù"
log_channel_name = "–ª–æ–≥–∏"
tickets_category_name = "–¢–ò–ö–ï–¢–´"
help_channel_name = "–ø–æ–º–æ—â—å"
log_tickets_channel_name = "–ª–æ–≥–∏-—Ç–∏–∫–µ—Ç–æ–≤"
# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def load_warns():
    if os.path.exists(WARNS_FILE):
        with open(WARNS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_warns(warns):
    with open(WARNS_FILE, 'w', encoding='utf-8') as f:
        json.dump(warns, f, ensure_ascii=False, indent=2)

def load_temporary_punishments():
    if os.path.exists(TEMPORARY_PUNISHMENTS_FILE):
        with open(TEMPORARY_PUNISHMENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_temporary_punishments(punishments):
    with open(TEMPORARY_PUNISHMENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(punishments, f, ensure_ascii=False, indent=2)

def load_tickets():
    if os.path.exists(TICKETS_FILE):
        with open(TICKETS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_tickets(tickets):
    with open(TICKETS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tickets, f, ensure_ascii=False, indent=2)

def load_user_roles():
    if os.path.exists(USER_ROLES_FILE):
        with open(USER_ROLES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_user_roles(user_roles):
    with open(USER_ROLES_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_roles, f, ensure_ascii=False, indent=2)
# --- –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def load_json_file(filename, default_value=None):
    if default_value is None:
        default_value = {}
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
            return default_value
    return default_value

def save_json_file(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–†–ê–¢–û–†–û–í ---
def load_mod_stats():
    return load_json_file(MODERATION_STATS_FILE)

def save_mod_stats(stats):
    save_json_file(MODERATION_STATS_FILE, stats)

def update_mod_stats(guild_id: int, moderator_id: int, action_type: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    stats = load_mod_stats()
    guild_str = str(guild_id)
    mod_str = str(moderator_id)
    
    if guild_str not in stats:
        stats[guild_str] = {}
    if mod_str not in stats[guild_str]:
        stats[guild_str][mod_str] = {'bans': 0, 'mutes': 0, 'warns': 0, 'tickets_closed': 0}
    
    if action_type in stats[guild_str][mod_str]:
        stats[guild_str][mod_str][action_type] += 1
    
    save_mod_stats(stats)

# --- –ö–õ–ê–°–°–´ –í–¨–Æ (–î–õ–Ø –ö–ù–û–ü–û–ö –ò –ú–û–î–ê–õ–û–í) ---

class TicketCreateView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(CreateTicketButton())

class CreateTicketButton(ui.Button):
    def __init__(self):
        super().__init__(label='–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', style=discord.ButtonStyle.primary, emoji='üì©', custom_id='persistent_create_ticket')

    async def callback(self, interaction: discord.Interaction):
        modal = TicketModal()
        await interaction.response.send_modal(modal)

class TicketCloseView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(CloseTicketButton())

class CloseTicketButton(ui.Button):
    def __init__(self):
        super().__init__(label='–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', style=discord.ButtonStyle.danger, emoji='üîí', custom_id='persistent_close_ticket')

    async def callback(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.manage_messages:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤!", ephemeral=True)
            return

        tickets = load_json_file(TICKETS_FILE)
        ticket_key = f"{interaction.guild.id}_{interaction.channel.id}"
        if ticket_key not in tickets:
            await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º!", ephemeral=True)
            return

        ticket_info = tickets[ticket_key]

        embed = discord.Embed(
            title="üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        embed.add_field(name="üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å", value=f"<@{ticket_info['user_id']}>", inline=True)
        embed.add_field(name="üìÖ –°–æ–∑–¥–∞–Ω", value=f"<t:{int(ticket_info['created_at'])}:R>", inline=True)
        embed.add_field(name="üìù –¢–µ–º–∞", value=ticket_info['topic'], inline=False)

        messages = []
        async for message in interaction.channel.history(limit=100):
            if not message.author.bot:
                messages.append(f"**{message.author.display_name}:** {message.content}")
        if messages:
            history_text = "\n".join(reversed(messages[-20:]))
            if len(history_text) > 1000:
                history_text = history_text[:1000] + "..."
            embed.add_field(name="üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", value=history_text, inline=False)

        log_channel = discord.utils.get(interaction.guild.channels, name=log_tickets_channel_name)
        if not log_channel:
            try:
                log_channel = await interaction.guild.create_text_channel(
                    log_tickets_channel_name,
                    reason="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"
                )
            except discord.Forbidden:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª {log_tickets_channel_name}")

        if log_channel:
            await log_channel.send(embed=embed)

        del tickets[ticket_key]
        save_json_file(TICKETS_FILE, tickets)

        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–ö–†–´–¢–ò–Ø –¢–ò–ö–ï–¢–ê ---
        update_mod_stats(interaction.guild.id, interaction.user.id, 'tickets_closed')
        # --- /–û–ë–ù–û–í–õ–ï–ù–ò–ï ---

        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–†–´–¢–ò–Ø –¢–ò–ö–ï–¢–ê ---
        log_channel_general = discord.utils.get(interaction.guild.channels, name=log_channel_name)
        if not log_channel_general:
            try:
                log_channel_general = await interaction.guild.create_text_channel(
                    log_channel_name,
                    reason="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
                )
            except discord.Forbidden:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª {log_channel_name}")

        if log_channel_general:
            embed_log = discord.Embed(
                title="üé´ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            embed_log.add_field(name="üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–∏–∫–µ—Ç–∞", value=f"<@{ticket_info['user_id']}>", inline=True)
            embed_log.add_field(name="üëÆ –ó–∞–∫—Ä—ã–ª", value=interaction.user.mention, inline=True)
            embed_log.add_field(name="üìù –¢–µ–º–∞", value=ticket_info['topic'], inline=False)
            embed_log.add_field(name="üí¨ –ö–∞–Ω–∞–ª", value=interaction.channel.mention, inline=False)
            await log_channel_general.send(embed=embed_log)
        # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

        await interaction.response.send_message("üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...")
        await asyncio.sleep(3)
        await interaction.channel.delete()

class TicketModal(ui.Modal, title='–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞'):
    topic = ui.TextInput(label='–¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞', placeholder='–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...', required=True, max_length=50)
    description = ui.TextInput(label='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', placeholder='–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ...', style=discord.TextStyle.paragraph, required=True, max_length=500)

    async def on_submit(self, interaction: discord.Interaction):
        await create_ticket(interaction, self.topic.value, self.description.value)

class WarnModal(ui.Modal, title='–í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω'):
    def __init__(self, target_user):
        super().__init__()
        self.target_user = target_user

    reason = ui.TextInput(label='–ü—Ä–∏—á–∏–Ω–∞ –≤–∞—Ä–Ω–∞', placeholder='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...', required=True, max_length=100)

    async def on_submit(self, interaction: discord.Interaction):
        await add_warn(interaction, self.target_user, self.reason.value)
        try:
            await send_punishment_dm(self.target_user, "–≤–∞—Ä–Ω", self.reason.value, None, interaction.guild.name)
        except discord.HTTPException:
            pass
        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –í–ê–†–ù–û–í ---
        update_mod_stats(interaction.guild.id, interaction.user.id, 'warns')
        # --- /–û–ë–ù–û–í–õ–ï–ù–ò–ï ---
        await interaction.response.send_message(f"‚úÖ {self.target_user.mention} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {self.reason.value}", ephemeral=True)

class MuteModal(ui.Modal, title='–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
    def __init__(self, target_user):
        super().__init__()
        self.target_user = target_user

    reason = ui.TextInput(label='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞', placeholder='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...', required=True, max_length=100)
    duration = ui.TextInput(label='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', placeholder='–ü—Ä–∏–º–µ—Ä: 30m, 2h, 1d, 7d (–º–∞–∫—Å 28 –¥–Ω–µ–π)', default='30m', required=True, max_length=10)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            duration_seconds = await parse_duration(self.duration.value)
            if not duration_seconds:
                await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30m, 2h, 1d", ephemeral=True)
                return
            duration_minutes = duration_seconds // 60
            if duration_minutes > 40320: # 28 –¥–Ω–µ–π –≤ –º–∏–Ω—É—Ç–∞—Ö
                await interaction.response.send_message("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ - 28 –¥–Ω–µ–π!", ephemeral=True)
                return

            mute_role = await get_or_create_mute_role(interaction.guild)
            await self.target_user.add_roles(mute_role, reason=f"–ú—É—Ç: {self.reason.value}")
            await add_temporary_punishment(interaction.guild.id, self.target_user.id, 'mute', duration_seconds, self.reason.value, interaction.user.id)
            
            # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ú–£–¢–û–í ---
            update_mod_stats(interaction.guild.id, interaction.user.id, 'mutes')
            # --- /–û–ë–ù–û–í–õ–ï–ù–ò–ï ---

            # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ú–£–¢–ê ---
            await log_action(interaction, self.target_user, f"–ú—É—Ç ({self.duration.value})", self.reason.value)
            # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

            await send_punishment_dm(self.target_user, "–º—É—Ç", self.reason.value, self.duration.value, interaction.guild.name)
            await interaction.response.send_message(f"‚úÖ {self.target_user.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {self.duration.value} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {self.reason.value}", ephemeral=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: {e}")
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: {str(e)}", ephemeral=True)

class BanModal(ui.Modal, title='–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
    def __init__(self, target_user):
        super().__init__()
        self.target_user = target_user

    reason = ui.TextInput(label='–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞', placeholder='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞...', required=True, max_length=100)
    duration = ui.TextInput(label='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞', placeholder='–ü—Ä–∏–º–µ—Ä: 1h, 2d, 30m (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ)', required=False, max_length=10)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            duration_text = self.duration.value.strip() if self.duration.value else "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π"
            duration_seconds = await parse_duration(self.duration.value) if self.duration.value else None

            ban_role = await get_or_create_ban_role(interaction.guild)
            await save_user_roles_backup(interaction.guild.id, self.target_user.id, self.target_user.roles)
            await self.target_user.add_roles(ban_role, reason=f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω: {self.reason.value}")

            for role in self.target_user.roles:
                if role != interaction.guild.default_role and role != ban_role:
                    try:
                        await self.target_user.remove_roles(role, reason="–°–Ω—è—Ç–∏–µ —Ä–æ–ª–µ–π –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –±–∞–Ω–µ")
                    except:
                        pass

            # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–ê–ù–û–í ---
            update_mod_stats(interaction.guild.id, interaction.user.id, 'bans')
            # --- /–û–ë–ù–û–í–õ–ï–ù–ò–ï ---

            # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ë–ê–ù–ê ---
            await log_action(interaction, self.target_user, f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω ({duration_text})", self.reason.value)
            # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

            if duration_seconds:
                await add_temporary_punishment(interaction.guild.id, self.target_user.id, 'temp_ban', duration_seconds, self.reason.value, interaction.user.id)

            await send_punishment_dm(self.target_user, "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω", self.reason.value, duration_text, interaction.guild.name)
            await interaction.response.send_message(f"‚úÖ {self.target_user.mention} –ø–æ–ª—É—á–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {self.reason.value}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}", ephemeral=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞: {e}")
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞: {str(e)}", ephemeral=True)

class ModerationView(ui.View):
    def __init__(self, target_user: discord.Member):
        super().__init__(timeout=30)
        self.target_user = target_user

    @ui.button(label='–ö–∏–∫–Ω—É—Ç—å', style=discord.ButtonStyle.danger, emoji='üë¢')
    async def kick_button(self, interaction: discord.Interaction, button: ui.Button):
        if not interaction.user.guild_permissions.kick_members:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∫–∏–∫–∞!", ephemeral=True)
            return
        try:
            reason = f"–ö–∏–∫–Ω—É—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é {interaction.user}"
            await self.target_user.kick(reason=reason)
            
            # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–ò–ö–ê ---
            await log_action(interaction, self.target_user, "–ö–∏–∫", reason)
            # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

            try:
                await send_punishment_dm(self.target_user, "–∫–∏–∫", reason, None, interaction.guild.name)
            except discord.HTTPException:
                pass
            await interaction.response.send_message(f"‚úÖ {self.target_user.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç!", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∫–∏–∫–∞!", ephemeral=True)

    @ui.button(label='–ó–∞–±–∞–Ω–∏—Ç—å', style=discord.ButtonStyle.danger, emoji='üî®')
    async def ban_button(self, interaction: discord.Interaction, button: ui.Button):
        if not interaction.user.guild_permissions.ban_members:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞!", ephemeral=True)
            return
        modal = BanModal(self.target_user)
        await interaction.response.send_modal(modal)

    @ui.button(label='–ú—É—Ç', style=discord.ButtonStyle.primary, emoji='üîá')
    async def mute_button(self, interaction: discord.Interaction, button: ui.Button):
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!", ephemeral=True)
            return
        modal = MuteModal(self.target_user)
        await interaction.response.send_modal(modal)

    @ui.button(label='–°–Ω—è—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è', style=discord.ButtonStyle.success, emoji='üîì')
    async def unpunish_button(self, interaction: discord.Interaction, button: ui.Button):
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π!", ephemeral=True)
            return
        try:
            mute_role = discord.utils.get(interaction.guild.roles, name=mute_role_name)
            if mute_role and mute_role in self.target_user.roles:
                await self.target_user.remove_roles(mute_role, reason="–°–Ω—è—Ç–∏–µ –º—É—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
                
                # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ù–Ø–¢–ò–Ø –ú–£–¢–ê ---
                await log_action(interaction, self.target_user, "–°–Ω—è—Ç–∏–µ –º—É—Ç–∞", "–ß–µ—Ä–µ–∑ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

            ban_role = discord.utils.get(interaction.guild.roles, name=ban_role_name)
            if ban_role and ban_role in self.target_user.roles:
                await self.target_user.remove_roles(ban_role, reason="–°–Ω—è—Ç–∏–µ –±–∞–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
                
                # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ù–Ø–¢–ò–Ø –ë–ê–ù–ê ---
                await log_action(interaction, self.target_user, "–°–Ω—è—Ç–∏–µ –±–∞–Ω–∞", "–ß–µ—Ä–µ–∑ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

                await restore_user_roles_backup(interaction.guild, self.target_user)

            await interaction.response.send_message(f"‚úÖ –ù–∞–∫–∞–∑–∞–Ω–∏—è —Å–Ω—è—Ç—ã —Å {self.target_user.mention}!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: {str(e)}", ephemeral=True)

    @ui.button(label='–í–∞—Ä–Ω', style=discord.ButtonStyle.secondary, emoji='‚ö†Ô∏è')
    async def warn_button(self, interaction: discord.Interaction, button: ui.Button):
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–æ–≤!", ephemeral=True)
            return
        modal = WarnModal(self.target_user)
        await interaction.response.send_modal(modal)

    async def on_timeout(self):
        for item in self.children:
            item.disabled = True
        try:
            await self.message.edit(view=self)
        except:
            pass

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def parse_duration(duration_str: str) -> int:
    if not duration_str:
        return None
    duration_str = duration_str.lower().strip()
    multipliers = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400, 'w': 604800}
    total_seconds = 0
    current_number = ''
    for char in duration_str:
        if char.isdigit():
            current_number += char
        elif char in multipliers:
            if current_number:
                total_seconds += int(current_number) * multipliers[char]
                current_number = ''
        else:
            return None
    return total_seconds if total_seconds > 0 else None

async def send_punishment_dm(user: discord.Member, punishment_type: str, reason: str, duration: str, guild_name: str):
    try:
        embed = discord.Embed(title="üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏", color=discord.Color.red(), timestamp=datetime.now())
        punishment_types = {"–±–∞–Ω": "üî® –ë–∞–Ω", "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω": "üî® –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω", "–º—É—Ç": "üîá –ú—É—Ç", "–∫–∏–∫": "üë¢ –ö–∏–∫", "–≤–∞—Ä–Ω": "‚ö†Ô∏è –í–∞—Ä–Ω"}
        embed.add_field(name="üîß –¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è", value=punishment_types.get(punishment_type, punishment_type), inline=True)
        if duration: embed.add_field(name="‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", value=duration, inline=True)
        embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞", inline=False)
        if punishment_type in ["–±–∞–Ω", "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω", "–º—É—Ç"] and duration:
            embed.add_field(name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="–ù–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç–æ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏", inline=False)
        await user.send(embed=embed)
        return True
    except discord.Forbidden:
        return False
    except Exception:
        return False

async def log_action(interaction: discord.Interaction, target_user: discord.Member, action: str, reason: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–∞–Ω–∞–ª #–ª–æ–≥–∏"""
    log_channel = discord.utils.get(interaction.guild.channels, name=log_channel_name)
    if log_channel is None:
        try:
            log_channel = await interaction.guild.create_text_channel(
                log_channel_name,
                reason="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            )
        except discord.Forbidden:
            print(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª {log_channel_name}.")
            return False
    embed = discord.Embed(title="üìù –õ–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", color=discord.Color.blue(), timestamp=datetime.now())
    embed.add_field(name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=target_user.mention, inline=True)
    embed.add_field(name="üîß –î–µ–π—Å—Ç–≤–∏–µ", value=action, inline=True)
    if reason: embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
    embed.set_footer(text=f"ID: {target_user.id}")
    try:
        await log_channel.send(embed=embed)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ª–æ–≥–∏: {e}")
        return False

async def add_temporary_punishment(guild_id: int, user_id: int, punishment_type: str, duration: int, reason: str, moderator_id: int):
    punishments = load_json_file(TEMPORARY_PUNISHMENTS_FILE)
    key = f"{guild_id}_{user_id}"
    end_time = datetime.now() + timedelta(seconds=duration)
    punishments[key] = {'type': punishment_type, 'end_time': end_time.isoformat(), 'reason': reason, 'moderator_id': moderator_id, 'guild_id': guild_id, 'user_id': user_id}
    save_json_file(TEMPORARY_PUNISHMENTS_FILE, punishments)

async def save_user_roles_backup(guild_id: int, user_id: int, roles):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –±–∞–Ω–∞"""
    user_roles_backup_data = load_json_file(USER_ROLES_BACKUP_FILE)
    key = f"{guild_id}_{user_id}"
    role_ids = [role.id for role in roles if role != role.guild.default_role]
    user_roles_backup_data[key] = {'role_ids': role_ids, 'saved_at': datetime.now().isoformat()}
    save_json_file(USER_ROLES_BACKUP_FILE, user_roles_backup_data)

async def restore_user_roles_backup(guild: discord.Guild, user: discord.Member):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞"""
    user_roles_backup_data = load_json_file(USER_ROLES_BACKUP_FILE)
    key = f"{guild.id}_{user.id}"
    if key in user_roles_backup_data:
        role_ids = user_roles_backup_data[key]['role_ids']
        for role_id in role_ids:
            role = guild.get_role(role_id)
            if role and role not in user.roles:
                try:
                    await user.add_roles(role, reason="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ –±–∞–Ω–∞")
                except:
                    pass
        del user_roles_backup_data[key]
        save_json_file(USER_ROLES_BACKUP_FILE, user_roles_backup_data)

async def get_or_create_ban_role(guild: discord.Guild):
    ban_role = discord.utils.get(guild.roles, name=ban_role_name)
    if ban_role is None:
        ban_role = await guild.create_role(name=ban_role_name, color=discord.Color.dark_red(), reason="–†–æ–ª—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞")
        for channel in guild.channels:
            try:
                if isinstance(channel, discord.TextChannel):
                    if channel.name == help_channel_name:
                        await channel.set_permissions(ban_role, view_channel=True, send_messages=False, read_message_history=True)
                    else:
                        await channel.set_permissions(ban_role, view_channel=False, send_messages=False)
                elif isinstance(channel, discord.VoiceChannel):
                    await channel.set_permissions(ban_role, view_channel=False, connect=False)
            except discord.Forbidden:
                continue
    return ban_role

async def get_or_create_mute_role(guild: discord.Guild):
    mute_role = discord.utils.get(guild.roles, name=mute_role_name)
    if mute_role is None:
        mute_role = await guild.create_role(name=mute_role_name, color=discord.Color.dark_gray(), reason="–†–æ–ª—å –¥–ª—è –º—É—Ç–∞")
        for channel in guild.channels:
            try:
                if isinstance(channel, discord.TextChannel):
                    await channel.set_permissions(mute_role, send_messages=False, add_reactions=False)
            except discord.Forbidden:
                continue
    return mute_role

async def setup_help_channel(guild: discord.Guild):
    help_channel = discord.utils.get(guild.text_channels, name=help_channel_name)
    if not help_channel:
        try:
            help_channel = await guild.create_text_channel(help_channel_name, topic="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        except discord.Forbidden:
            return None
    embed = discord.Embed(title="üÜò –¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏", description="–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", color=discord.Color.blue())
    embed.add_field(name="üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", value="1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ", inline=False)
    embed.add_field(name="‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", value="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤", inline=True)
    embed.add_field(name="üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", value="–í–∞—à —Ç–∏–∫–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", inline=True)
    view = TicketCreateView()
    try:
        await help_channel.purge(limit=10)
        await help_channel.send(embed=embed, view=view)
    except discord.Forbidden:
        pass
    return help_channel

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ê–†–ù–ê–ú–ò ---

async def add_warn(interaction: discord.Interaction, user: discord.Member, reason: str):
    warns = load_json_file(WARNS_FILE)
    guild_id = str(interaction.guild.id)
    user_id = str(user.id)
    if guild_id not in warns: warns[guild_id] = {}
    if user_id not in warns[guild_id]: warns[guild_id][user_id] = []
    warn_data = {'reason': reason, 'moderator': f"{interaction.user.name} ({interaction.user.id})", 'timestamp': datetime.now().isoformat()}
    warns[guild_id][user_id].append(warn_data)
    save_json_file(WARNS_FILE, warns)
    
    # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –í–ê–†–ù–û–í ---
    update_mod_stats(interaction.guild.id, interaction.user.id, 'warns')
    # --- /–û–ë–ù–û–í–õ–ï–ù–ò–ï ---

    # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ù–ê ---
    await log_action(interaction, user, "–í–∞—Ä–Ω", reason)
    # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

    warn_count = len(warns[guild_id][user_id])
    if warn_count >= 3:
        moderator_role = discord.utils.get(interaction.guild.roles, name=moderator_role_name)
        helper_role = discord.utils.get(interaction.guild.roles, name=helper_role_name)
        roles_to_remove = []
        if moderator_role and moderator_role in user.roles: roles_to_remove.append(moderator_role)
        if helper_role and helper_role in user.roles: roles_to_remove.append(helper_role)
        if roles_to_remove:
            await user.remove_roles(*roles_to_remove, reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ —Ä–æ–ª–µ–π –∑–∞ 3+ –≤–∞—Ä–Ω–∞")
            role_names = ", ".join([role.name for role in roles_to_remove])
            
            # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û-–°–ù–Ø–¢–ò–Ø –†–û–õ–ï–ô ---
            await log_action(interaction, user, "–ê–≤—Ç–æ-—Å–Ω—è—Ç–∏–µ —Ä–æ–ª–µ–π", f"–°–Ω—è—Ç—ã —Ä–æ–ª–∏: {role_names} –∑–∞ 3+ –≤–∞—Ä–Ω–∞")
            # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

    embed = discord.Embed(title="‚ö†Ô∏è –í—ã–¥–∞–Ω –≤–∞—Ä–Ω", color=discord.Color.orange(), timestamp=datetime.now())
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=user.mention, inline=True)
    embed.add_field(name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
    embed.add_field(name="üìä –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤", value=warn_count, inline=True)
    embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
    await interaction.followup.send(embed=embed, ephemeral=True)

async def remove_warn(interaction: discord.Interaction, user: discord.Member, warn_index: int = None):
    warns = load_json_file(WARNS_FILE)
    guild_id = str(interaction.guild.id)
    user_id = str(user.id)
    if guild_id not in warns or user_id not in warns[guild_id] or not warns[guild_id][user_id]:
        await interaction.response.send_message("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤!", ephemeral=True)
        return
    if warn_index is None:
        removed_warn = warns[guild_id][user_id].pop()
    else:
        if warn_index < 1 or warn_index > len(warns[guild_id][user_id]):
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–Ω–∞!", ephemeral=True)
            return
        removed_warn = warns[guild_id][user_id].pop(warn_index - 1)
    save_json_file(WARNS_FILE, warns)
    
    # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–ù–Ø–¢–ò–Ø –í–ê–†–ù–ê ---
    await log_action(interaction, user, "–°–Ω—è—Ç–∏–µ –≤–∞—Ä–Ω–∞", f"–°–Ω—è—Ç –≤–∞—Ä–Ω: {removed_warn['reason']}")
    # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

    await interaction.response.send_message(f"‚úÖ –°–Ω—è—Ç –≤–∞—Ä–Ω —Å {user.mention}\n–ü—Ä–∏—á–∏–Ω–∞: {removed_warn['reason']}", ephemeral=True)

# --- –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–ò–ö–ï–¢–ê ---

async def create_ticket(interaction: discord.Interaction, topic: str, description: str):
    guild = interaction.guild
    category = discord.utils.get(guild.categories, name=tickets_category_name)
    if not category:
        try:
            category = await guild.create_category_channel(tickets_category_name)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤!", ephemeral=True)
            return
    ticket_number = len(load_json_file(TICKETS_FILE)) + 1
    try:
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True, manage_messages=True, manage_channels=True)
        }
        moderator_role = discord.utils.get(guild.roles, name=moderator_role_name)
        if moderator_role:
            overwrites[moderator_role] = discord.PermissionOverwrite(view_channel=True, send_messages=True, manage_messages=True)
        ticket_channel = await category.create_text_channel(
            name=f"—Ç–∏–∫–µ—Ç-{ticket_number}-{interaction.user.display_name}",
            overwrites=overwrites,
            topic=f"–¢–∏–∫–µ—Ç –æ—Ç {interaction.user.display_name}: {topic}"
        )
        tickets = load_json_file(TICKETS_FILE)
        tickets[f"{guild.id}_{ticket_channel.id}"] = {'user_id': interaction.user.id, 'topic': topic, 'created_at': datetime.now().timestamp(), 'description': description}
        save_json_file(TICKETS_FILE, tickets)
        embed = discord.Embed(title=f"üì© –¢–∏–∫–µ—Ç #{ticket_number}", color=discord.Color.green(), timestamp=datetime.now())
        embed.add_field(name="üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìù –¢–µ–º–∞", value=topic, inline=True)
        embed.add_field(name="üìã –û–ø–∏—Å–∞–Ω–∏–µ", value=description, inline=False)
        embed.set_footer(text="–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        view = TicketCloseView()
        message = await ticket_channel.send(embed=embed, view=view)
        await ticket_channel.send(f"üîî {interaction.user.mention} –≤–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        if moderator_role: await ticket_channel.send(f"üì¢ {moderator_role.mention} –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!")
        await interaction.response.send_message(f"‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_channel.mention}", ephemeral=True)
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}", ephemeral=True)

# --- –¢–ê–°–ö –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í–†–ï–ú–ï–ù–ù–´–• –ù–ê–ö–ê–ó–ê–ù–ò–ô ---

@tasks.loop(minutes=1)
async def check_temporary_punishments():
    punishments = load_json_file(TEMPORARY_PUNISHMENTS_FILE)
    current_time = datetime.now()
    to_remove = []
    for key, punishment in punishments.items():
        end_time = datetime.fromisoformat(punishment['end_time'])
        if current_time >= end_time:
            guild = bot.get_guild(punishment['guild_id'])
            if guild:
                try:
                    user = guild.get_member(punishment['user_id'])
                    if user:
                        if punishment['type'] == 'temp_ban':
                            ban_role = discord.utils.get(guild.roles, name=ban_role_name)
                            if ban_role and ban_role in user.roles:
                                await user.remove_roles(ban_role, reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞")
                                await restore_user_roles_backup(guild, user)
                                
                                # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û-–°–ù–Ø–¢–ò–Ø –ë–ê–ù–ê ---
                                await log_auto_punishment_remove(guild, user, "–±–∞–Ω", punishment['reason'])
                                # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

                        elif punishment['type'] == 'mute':
                            mute_role = discord.utils.get(guild.roles, name=mute_role_name)
                            if mute_role and mute_role in user.roles:
                                await user.remove_roles(mute_role, reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞")
                                
                                # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û-–°–ù–Ø–¢–ò–Ø –ú–£–¢–ê ---
                                await log_auto_punishment_remove(guild, user, "–º—É—Ç", punishment['reason'])
                                # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è: {e}")
            to_remove.append(key)
    for key in to_remove:
        del punishments[key]
    if to_remove:
        save_json_file(TEMPORARY_PUNISHMENTS_FILE, punishments)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ù–Ø–¢–ò–Ø –ù–ê–ö–ê–ó–ê–ù–ò–ô ---
async def log_auto_punishment_remove(guild: discord.Guild, user: discord.Member, punishment_type: str, reason: str):
    log_channel = discord.utils.get(guild.channels, name=log_channel_name)
    if not log_channel:
        try:
            log_channel = await guild.create_text_channel(log_channel_name, reason="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        except discord.Forbidden:
            print(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª {log_channel_name} –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ-—Å–Ω—è—Ç–∏—è.")
            return
    embed = discord.Embed(title="üîì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è", color=discord.Color.green(), timestamp=datetime.now())
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=user.mention, inline=True)
    embed.add_field(name="üîß –¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è", value=punishment_type, inline=True)
    embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=reason or "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è", inline=True)
    try:
        await log_channel.send(embed=embed)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –∞–≤—Ç–æ-—Å–Ω—è—Ç–∏—è: {e}")

# --- –ë–û–¢ ---

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents)

# --- –ö–û–ú–ê–ù–î–´ ---

@bot.tree.command(name="action", description="–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def action(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å == bot.user:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫ –±–æ—Ç—É!", ephemeral=True)
        return
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å == interaction.user:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫ —Å–µ–±–µ!", ephemeral=True)
        return

    embed = discord.Embed(
        title="üö® –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
        description=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}",
        color=discord.Color.orange()
    )
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name} ({–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id})", inline=True)
    embed.add_field(name="üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", value=f"<t:{int(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.joined_at.timestamp())}:R>", inline=True)
    embed.set_thumbnail(url=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_avatar.url)
    view = ModerationView(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
    await interaction.response.send_message(embed=embed, view=view)
    view.message = await interaction.original_response()

@bot.tree.command(name="moderator", description="–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def moderator(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π!", ephemeral=True)
        return
    role = discord.utils.get(interaction.guild.roles, name=moderator_role_name)
    if role is None:
        try:
            role = await interaction.guild.create_role(
                name=moderator_role_name,
                color=discord.Color.blue(),
                permissions=discord.Permissions(kick_members=True, ban_members=True, manage_messages=True, moderate_members=True),
                reason="–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /moderator"
            )
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π!", ephemeral=True)
            return
    try:
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(role, reason=f"–†–æ–ª—å –≤—ã–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É {interaction.user}")
        
        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–´–î–ê–ß–ò –†–û–õ–ò –ú–û–î–ï–†–ê–¢–û–†–ê ---
        await log_action(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", moderator_role_name)
        # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

        embed = discord.Embed(title="‚úÖ –†–æ–ª—å –≤—ã–¥–∞–Ω–∞", description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role.mention}", color=discord.Color.green())
        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π!", ephemeral=True)

@bot.tree.command(name="helper", description="–í—ã–¥–∞—Ç—å —Ä–æ–ª—å —Ö–µ–ª–ø–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def helper(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    if not interaction.user.guild_permissions.manage_roles:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π!", ephemeral=True)
        return
    role = discord.utils.get(interaction.guild.roles, name=helper_role_name)
    if role is None:
        try:
            role = await interaction.guild.create_role(
                name=helper_role_name,
                color=discord.Color.green(),
                permissions=discord.Permissions(manage_messages=True, read_message_history=True, use_application_commands=True),
                reason="–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /helper"
            )
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π!", ephemeral=True)
            return
    try:
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(role, reason=f"–†–æ–ª—å –≤—ã–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É {interaction.user}")
        
        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–´–î–ê–ß–ò –†–û–õ–ò –•–ï–õ–ü–ï–†–ê ---
        await log_action(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", helper_role_name)
        # --- /–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---

        embed = discord.Embed(title="‚úÖ –†–æ–ª—å –≤—ã–¥–∞–Ω–∞", description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role.mention}", color=discord.Color.green())
        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π!", ephemeral=True)

@bot.tree.command(name="–±–∞–Ω", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏—á–∏–Ω–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º")
async def ban_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: str = None):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–æ–ª—å –ë–ê–ù"""
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞!", ephemeral=True)
        return

    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await interaction.response.defer(ephemeral=True)

    try:
        duration_text = –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å if –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å else "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π"
        duration_seconds = await parse_duration(–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å) if –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å else None
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ë–ê–ù
        ban_role = await get_or_create_ban_role(interaction.guild)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_roles(interaction.guild.id, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles)
        # –í—ã–¥–∞–µ–º —Ä–æ–ª—å –ë–ê–ù
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(ban_role, reason=f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω: {–ø—Ä–∏—á–∏–Ω–∞}")
        # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
        for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles:
            if role != interaction.guild.default_role and role != ban_role:
                try:
                    await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.remove_roles(role, reason="–°–Ω—è—Ç–∏–µ —Ä–æ–ª–µ–π –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –±–∞–Ω–µ")
                except:
                    pass
        if duration_seconds:
            await add_temporary_punishment(
                interaction.guild.id,
                –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,
                'temp_ban',
                duration_seconds,
                –ø—Ä–∏—á–∏–Ω–∞,
                interaction.user.id
            )
        await log_action(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω ({duration_text})", –ø—Ä–∏—á–∏–Ω–∞)
        await send_punishment_dm(
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
            "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω",
            –ø—Ä–∏—á–∏–Ω–∞,
            duration_text,
            interaction.guild.name
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await interaction.followup.send(
            f"‚úÖ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –ø–æ–ª—É—á–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {–ø—Ä–∏—á–∏–Ω–∞}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
        )

    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="–º—É—Ç", description="–í—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ä–æ–ª—å")
async def mute_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: str, –ø—Ä–∏—á–∏–Ω–∞: str):
    """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–æ–ª—å –ú–£–¢"""
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞!", ephemeral=True)
        return

    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    await interaction.response.defer(ephemeral=True)

    try:
        duration_seconds = await parse_duration(–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        if not duration_seconds:
            await interaction.followup.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30m, 2h, 1d", ephemeral=True)
            return
        duration_minutes = duration_seconds // 60
        if duration_minutes > 40320:
            await interaction.followup.send("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ - 28 –¥–Ω–µ–π!", ephemeral=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ú–£–¢
        mute_role = await get_or_create_mute_role(interaction.guild)
        # –í—ã–¥–∞–µ–º —Ä–æ–ª—å –ú–£–¢
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(mute_role, reason=f"–ú—É—Ç: {–ø—Ä–∏—á–∏–Ω–∞}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç
        await add_temporary_punishment(
            interaction.guild.id,
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,
            'mute',
            duration_seconds,
            –ø—Ä–∏—á–∏–Ω–∞,
            interaction.user.id
        )
        await log_action(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, f"–ú—É—Ç ({–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å})", –ø—Ä–∏—á–∏–Ω–∞)
        await send_punishment_dm(
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
            "–º—É—Ç",
            –ø—Ä–∏—á–∏–Ω–∞,
            –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
            interaction.guild.name
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await interaction.followup.send(
            f"‚úÖ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {–ø—Ä–∏—á–∏–Ω–∞}"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: {e}")
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="—Ä–∞–∑–º—É—Ç", description="–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unmute_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    """–°–Ω—è—Ç—å –º—É—Ç"""
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞!", ephemeral=True)
        return

    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await interaction.response.defer(ephemeral=True)

    try:
        mute_role = discord.utils.get(interaction.guild.roles, name="–ú–£–¢")
        if mute_role and mute_role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles:
            await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.remove_roles(mute_role, reason=f"–°–Ω—è—Ç–∏–µ –º—É—Ç–∞ {interaction.user}")
            await log_action(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "–°–Ω—è—Ç–∏–µ –º—É—Ç–∞", "–ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
            await interaction.followup.send(f"‚úÖ –ú—É—Ç —Å–Ω—è—Ç —Å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}!")
        else:
            await interaction.followup.send("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º—É—Ç–∞!", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="–≤–∞—Ä–Ω", description="–í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def warn_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
    """–í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω"""
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–æ–≤!", ephemeral=True)
        return

    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await interaction.response.defer(ephemeral=True)

    try:
        await add_warn(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏—á–∏–Ω–∞)
        # –í `add_warn` —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `interaction.followup.send`, —Ç–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤–∞—Ä–Ω–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="–∞–Ω–≤–∞—Ä–Ω", description="–°–Ω—è—Ç—å –≤–∞—Ä–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unwarn_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –Ω–æ–º–µ—Ä_–≤–∞—Ä–Ω–∞: int = None):
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤–∞—Ä–Ω–æ–≤!", ephemeral=True)
        return
    await remove_warn(interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ–º–µ—Ä_–≤–∞—Ä–Ω–∞)

@bot.tree.command(name="–≤–∞—Ä–Ω—ã", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def warns_cmd(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    warns = load_json_file(WARNS_FILE)
    guild_id = str(interaction.guild.id)
    user_id = str(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    if guild_id not in warns or user_id not in warns[guild_id] or not warns[guild_id][user_id]:
        await interaction.response.send_message(f"‚ùå –£ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤!", ephemeral=True)
        return
    user_warns = warns[guild_id][user_id]
    embed = discord.Embed(title=f"‚ö†Ô∏è –í–∞—Ä–Ω—ã {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}", color=discord.Color.orange(), timestamp=datetime.now())
    for i, warn in enumerate(user_warns, 1):
        timestamp = datetime.fromisoformat(warn['timestamp']).strftime("%d.%m.%Y %H:%M")
        embed.add_field(name=f"–í–∞—Ä–Ω #{i}", value=f"**–ü—Ä–∏—á–∏–Ω–∞:** {warn['reason']}\n**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {warn['moderator']}\n**–í—Ä–µ–º—è:** {timestamp}", inline=False)
    embed.set_footer(text=f"–í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: {len(user_warns)}")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ç–∏–∫–µ—Ç–æ–≤", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤")
async def setup_tickets_cmd(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤!", ephemeral=True)
        return
    help_channel = await setup_help_channel(interaction.guild)
    if help_channel:
        await interaction.response.send_message(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {help_channel.mention}!", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤!", ephemeral=True)

@bot.tree.command(name="staff_profile", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/—Ö–µ–ª–ø–µ—Ä–∞")
async def staff_profile(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    stats = load_mod_stats()
    guild_str = str(interaction.guild.id)
    mod_str = str(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    
    if guild_str not in stats or mod_str not in stats[guild_str]:
        await interaction.response.send_message(f"‚ùå –£ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", ephemeral=True)
        return
    
    user_stats = stats[guild_str][mod_str]
    
    embed = discord.Embed(
        title=f"üìä –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}",
        color=discord.Color.gold(),
        timestamp=datetime.now()
    )
    embed.add_field(name="üî® –ë–∞–Ω–æ–≤", value=user_stats.get('bans', 0), inline=True)
    embed.add_field(name="üîá –ú—É—Ç–æ–≤", value=user_stats.get('mutes', 0), inline=True)
    embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω–æ–≤", value=user_stats.get('warns', 0), inline=True)
    embed.add_field(name="üé´ –ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤", value=user_stats.get('tickets_closed', 0), inline=True)
    embed.set_thumbnail(url=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_avatar.url)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="mod_history", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def mod_history(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∞—Ä–Ω—ã, –º—É—Ç—ã, –±–∞–Ω—ã)"""
    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    await interaction.response.defer(ephemeral=True)

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤–∞—Ä–Ω–æ–≤
        warns = load_warns()
        guild_id = str(interaction.guild.id)
        user_id = str(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
        user_warns = warns.get(guild_id, {}).get(user_id, [])

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π (–±–∞–Ω—ã, –º—É—Ç—ã)
        temp_punishments = load_temporary_punishments()
        user_temp_punishments = []
        for key, punishment in temp_punishments.items():
            if punishment.get('guild_id') == interaction.guild.id and punishment.get('user_id') == –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id:
                user_temp_punishments.append(punishment)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–ø–∏—Å–∏
        if not user_warns and not user_temp_punishments:
            await interaction.followup.send(f"‚ùå –£ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–π.", ephemeral=True)
            return

        embed = discord.Embed(
            title=f"üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        embed.set_thumbnail(url=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_avatar.url)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_warns:
            warn_list = []
            for i, warn in enumerate(user_warns, 1):
                timestamp = datetime.fromisoformat(warn['timestamp']).strftime("%d.%m.%Y %H:%M")
                warn_list.append(f"`#{i}` **{warn['reason']}** - {warn['moderator']} ({timestamp})")
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(warn_list) > 10:
                 warn_list = warn_list[:10] + [f"... –∏ –µ—â—ë {len(user_warns) - 10}"]
            embed.add_field(name="‚ö†Ô∏è –í–∞—Ä–Ω—ã", value="\n".join(warn_list), inline=False)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_temp_punishments:
            punishment_list = []
            for punishment in user_temp_punishments:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è
                punishment_type = punishment['type']
                if punishment_type == 'temp_ban':
                    type_str = "–ë–∞–Ω"
                elif punishment_type == 'mute':
                    type_str = "–ú—É—Ç"
                else:
                    type_str = punishment_type

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                mod = interaction.guild.get_member(punishment['moderator_id'])
                mod_name = mod.display_name if mod else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                end_time = datetime.fromisoformat(punishment['end_time'])
                time_str = end_time.strftime("%d.%m.%Y %H:%M")

                punishment_list.append(f"**{type_str}** - {punishment['reason']} - {mod_name} (–¥–æ {time_str})")

            # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(punishment_list) > 10:
                 punishment_list = punishment_list[:10] + [f"... –∏ –µ—â—ë {len(user_temp_punishments) - 10}"]

            embed.add_field(name="üî® –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π", value="\n".join(punishment_list), inline=False)

        await interaction.followup.send(embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /mod_history: {e}")
        await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", ephemeral=True)

@bot.tree.command(name="test", description="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞")
async def test(interaction: discord.Interaction):
    await interaction.response.send_message("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ")

# --- –°–û–ë–´–¢–ò–Ø –ë–û–¢–ê ---

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    check_temporary_punishments.start()
    for guild in bot.guilds:
        await setup_help_channel(guild)
        await get_or_create_ban_role(guild)
        await get_or_create_mute_role(guild)
    bot.add_view(TicketCreateView())
    bot.add_view(TicketCloseView())
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
# –ü–û–ú–ù–ò–¢–ï: –ó–ê–ú–ï–ù–ò–¢–ï 'YOUR_BOT_TOKEN_HERE' –ù–ê –í–ê–® –ù–û–í–´–ô –¢–û–ö–ï–ù!
import os
bot.run(os.getenv('DISCORD_TOKEN'))